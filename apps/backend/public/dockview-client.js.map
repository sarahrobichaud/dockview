{
  "version": 3,
  "sources": ["../src/scripts/ws-config.ts", "../../../packages/ws/src/types/events.enum.ts", "../../../packages/ws/src/client/index.ts", "../../../packages/ws/src/types/custom-event-map.ts", "../src/scripts/client.ts"],
  "sourcesContent": ["export default {\n  URL_DEV: \"ws://localhost:8080/\",\n  URL_PROD: \"wss://dv.service.siteharbor.ca/ws/\",\n};\n", "export const Instance = {\n\tJOIN: \"instance::join\",\n\tLEAVE: \"instance::leave\",\n\tUPDATE_VIEW_COUNT: \"instance::updateViewCount\",\n} as const;\n\nexport type InstanceEventKey = (typeof Instance)[keyof typeof Instance];\n\nexport const WSEvent = {\n\tOPEN: \"open\",\n\tCLOSE: \"close\",\n} as const;\n\nexport type WSEventKey = (typeof WSEvent)[keyof typeof WSEvent];\n", "import { CustomEventMap, DVEventKey } from \"../types/custom-event-map\";\nimport { Instance } from \"../types/events.enum\";\nimport { WebSocketMessage } from \"../types/interfaces\";\n\nexport class DockviewWS extends EventTarget {\n\tprivate socket: WebSocket;\n\n\tconstructor(url: string) {\n\t\tsuper();\n\t\tthis.socket = new WebSocket(url);\n\t\tthis.initialize();\n\t}\n\n\tpublic override addEventListener<T extends DVEventKey>(\n        type: T,\n        listener: (event: CustomEventMap[T]) => void,\n        options?: boolean | AddEventListenerOptions\n    ): void\n    // Second overload matching EventTarget's signature exactly\n    public override addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject | null,\n        options?: boolean | AddEventListenerOptions\n    ): void;\n    // Implementation\n    public override addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject | null,\n        options?: boolean | AddEventListenerOptions\n    ): void {\n        super.addEventListener(type, listener, options);\n    }\n\n\n\tprivate initialize() {\n\t\tthis.socket.addEventListener(\"open\", () => {\n\t\t\tconsole.log(\"Connected to server\");\n\t\t\t// Optionally, send an initial message\n\t\t\tthis.dispatchEvent(new Event(\"open\"));\n\n\t\t\t// Extract containerID from subdomain\n\n\t\t\tconst subdomain = window.location.hostname.split(\".\")[0];\n\n\t\t\tconst [prefix, containerID] = subdomain.split(\"--\");\n\n\t\t\tthis.send({ type: Instance.JOIN, payload: { containerID: containerID } });\n\t\t});\n\n\t\tthis.socket.addEventListener(\"message\", ({ data }) => {\n\t\t\tconst message: WebSocketMessage = JSON.parse(data.toString());\n\t\t\tthis.handleMessage(message);\n\t\t});\n\n\t\tthis.socket.addEventListener(\"close\", () => {\n\t\t\tthis.dispatchEvent(new Event(\"close\"));\n\t\t\tconsole.log(\"Disconnected from server\");\n\t\t});\n\t}\n\n\tprivate handleMessage(message: WebSocketMessage) {\n\t\tconst event = new CustomEvent(message.type, { detail: message.payload });\n\t\tthis.dispatchEvent(event);\n\t}\n\n\tpublic send(message: WebSocketMessage) {\n\t\tthis.socket.send(JSON.stringify(message));\n\t}\n}\n", "\nexport interface CustomEventMap  {\n    readonly \"instance::init\": DVInitEvent;\n    readonly \"instance::update-view-count\": DVUpdateViewCountEvent;\n} \n\n\nexport const DVEventKeys  = {\n    INIT: \"instance::init\",\n    UPDATE_VIEW_COUNT: \"instance::update-view-count\",\n} as const;\n\nexport type DVEventKey =(typeof DVEventKeys)[keyof typeof DVEventKeys]; \n\n\nexport type DVInitEvent = CustomEvent<{ containerID: string }>;\nexport type DVUpdateViewCountEvent = CustomEvent<{ count: number }>;\n", "import WSConfig from \"./ws-config\";\nimport { Instance } from \"../types/events.enum\";\nimport { DockviewWS } from \"@dockview/ws/client\";\nimport {DVEventKey, DVEventKeys} from \"@dockview/ws/types\"\n\nconst client = new DockviewWS(WSConfig.URL_DEV);\n\nclient.addEventListener(DVEventKeys.INIT, (event) => {\n\tconsole.log(event.detail);\n});\n\n\nclient.addEventListener(DVEventKeys.UPDATE_VIEW_COUNT, (event) => {\n\tconst viewCount = document.getElementById(\"view-count\");\n\n\tif (!viewCount) {\n\t\tconsole.log(\"view-count not found\");\n\t\treturn;\n\t}\n\n\tviewCount.classList.remove(\"animate-spin\");\n\tviewCount.innerHTML = event.detail.count.toString();\n});\n"],
  "mappings": ";;;AAAA,MAAO,oBAAQ;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,EACZ;;;ACHO,MAAM,WAAW;AAAA,IACvB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,mBAAmB;AAAA,EACpB;;;ACAO,MAAM,aAAN,cAAyB,YAAY;AAAA,IAG3C,YAAY,KAAa;AACxB,YAAM;AACN,WAAK,SAAS,IAAI,UAAU,GAAG;AAC/B,WAAK,WAAW;AAAA,IACjB;AAAA;AAAA,IAcmB,iBACZ,MACA,UACA,SACI;AACJ,YAAM,iBAAiB,MAAM,UAAU,OAAO;AAAA,IAClD;AAAA,IAGK,aAAa;AACpB,WAAK,OAAO,iBAAiB,QAAQ,MAAM;AAC1C,gBAAQ,IAAI,qBAAqB;AAEjC,aAAK,cAAc,IAAI,MAAM,MAAM,CAAC;AAIpC,cAAM,YAAY,OAAO,SAAS,SAAS,MAAM,GAAG,EAAE,CAAC;AAEvD,cAAM,CAAC,QAAQ,WAAW,IAAI,UAAU,MAAM,IAAI;AAElD,aAAK,KAAK,EAAE,MAAM,SAAS,MAAM,SAAS,EAAE,YAAyB,EAAE,CAAC;AAAA,MACzE,CAAC;AAED,WAAK,OAAO,iBAAiB,WAAW,CAAC,EAAE,KAAK,MAAM;AACrD,cAAM,UAA4B,KAAK,MAAM,KAAK,SAAS,CAAC;AAC5D,aAAK,cAAc,OAAO;AAAA,MAC3B,CAAC;AAED,WAAK,OAAO,iBAAiB,SAAS,MAAM;AAC3C,aAAK,cAAc,IAAI,MAAM,OAAO,CAAC;AACrC,gBAAQ,IAAI,0BAA0B;AAAA,MACvC,CAAC;AAAA,IACF;AAAA,IAEQ,cAAc,SAA2B;AAChD,YAAM,QAAQ,IAAI,YAAY,QAAQ,MAAM,EAAE,QAAQ,QAAQ,QAAQ,CAAC;AACvE,WAAK,cAAc,KAAK;AAAA,IACzB;AAAA,IAEO,KAAK,SAA2B;AACtC,WAAK,OAAO,KAAK,KAAK,UAAU,OAAO,CAAC;AAAA,IACzC;AAAA,EACD;;;AC7DO,MAAM,cAAe;AAAA,IACxB,MAAM;AAAA,IACN,mBAAmB;AAAA,EACvB;;;ACLA,MAAM,SAAS,IAAI,WAAW,kBAAS,OAAO;AAE9C,SAAO,iBAAiB,YAAY,MAAM,CAAC,UAAU;AACpD,YAAQ,IAAI,MAAM,MAAM;AAAA,EACzB,CAAC;AAGD,SAAO,iBAAiB,YAAY,mBAAmB,CAAC,UAAU;AACjE,UAAM,YAAY,SAAS,eAAe,YAAY;AAEtD,QAAI,CAAC,WAAW;AACf,cAAQ,IAAI,sBAAsB;AAClC;AAAA,IACD;AAEA,cAAU,UAAU,OAAO,cAAc;AACzC,cAAU,YAAY,MAAM,OAAO,MAAM,SAAS;AAAA,EACnD,CAAC;",
  "names": []
}
